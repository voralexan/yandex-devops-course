include:
  - project: 'templates/ci'
    file: 'DockerInDockerTemplate.yml'

stages:
  - build
  - test
  - release
  - notify
  - deploy

build-frontend:
  stage: build
  image: docker:20.10.12-dind-rootless
  before_script:
    - until docker info; do sleep 1; done
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - cd frontend
    - >
      docker build
      --build-arg VERSION=$VERSION
      --tag $CI_REGISTRY_IMAGE/sausage-frontend:$CI_COMMIT_SHA
      .
    - docker push $CI_REGISTRY_IMAGE/sausage-frontend:$CI_COMMIT_SHA


sonarqube-frontend-sast:
  stage: test
  only:
    changes:
    - frontend/*
  image:
    name: sonarsource/sonar-scanner-cli:latest
    entrypoint: [""]
  script:
    - cd frontend
    - >
      sonar-scanner
      -Dsonar.sources=.
      -Dsonar.qualitygate.wait=true
      -Dsonar.projectKey=${SONAR_PROJECT_FRONTEND_NAME}
      -Dsonar.projectName=${SONAR_PROJECT_FRONTEND_NAME}
      -Dsonar.host.url=${SONARQUBE_URL}
      -Dsonar.login=${SONAR_LOGIN}
  needs:
    - build-frontend

upload-frontend-latest:
  variables:
    GIT_STRATEGY: none
  image: docker:20.10.12-dind-rootless
  stage: release
  before_script:
    - until docker info; do sleep 1; done
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker pull $CI_REGISTRY_IMAGE/sausage-frontend:$CI_COMMIT_SHA
    # если образ прошел проверки в CI (сканирование, тесты и т.д), то тегаем latest
    - docker tag $CI_REGISTRY_IMAGE/sausage-frontend:$CI_COMMIT_SHA $CI_REGISTRY_IMAGE/sausage-frontend:latest
    - docker push $CI_REGISTRY_IMAGE/sausage-frontend:latest

slack-notify-frontend:
  stage: notify
  only:
    changes:
    - frontend/*
    variables:
    - $CI_COMMIT_MESSAGE =~ /send notification/
  script: >
    curl -X POST -H 'Content-type:application/json' --data '
      {
        "blocks": [
            {
                "type": "section",
                "text": {
                    "type": "plain_text",
                    "text": "Вышла новая версия фронтенда сосисочной — '$VERSION' ✓"
                }
            },
            {
                "type": "actions",
                "elements": [
                    {
                        "type": "button",
                        "text": {
                            "type": "plain_text",
                            "text": "Скачать артефакты фронтенд",
                            "emoji": true
                        },
                        "url": "'$NEXUS_REPO_URL'/sausage-store-voronin-aleksey-frontend/'$VERSION'/sausage-store-'$VERSION'.tar.gz"
                    }
                ]
            }
        ]
    }'
    $SLACK_HOOK

deploy-frontend:
  stage: deploy
  image: alpine:3.15.0
  when: manual
  before_script:
    - apk add openssh-client bash
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo "$SSH_KNOWN_HOSTS" >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
  script:
    - ssh ${DEV_USER}@${DEV_HOST}
      "export "VERSION=${VERSION}";
       export "GR_USER=${NEXUS_REPO_USER}";
       export "GR_PASS=${NEXUS_REPO_PASS}";
      /bin/bash -s " < ./frontend/deploy.sh